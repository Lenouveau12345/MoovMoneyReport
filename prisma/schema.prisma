generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(ADMIN)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Transaction {
  id                         String         @id @default(cuid())
  transactionId              String
  transactionInitiatedTime   DateTime
  frmsisdn                   String
  tomsisdn                   String
  frName                     String?
  toName                     String?
  frProfile                  String
  toProfile                  String
  transactionType            String
  originalAmount             Float
  fee                        Float
  commissionAll              Float
  merchantsOnlineCashIn      String
  importSessionId            String?
  createdAt                  DateTime       @default(now())
  updatedAt                  DateTime       @updatedAt
  commissionDistributeur     Float?
  commissionMarchand         Float?
  commissionRevendeur        Float?
  commissionSousDistributeur Float?
  importSession              ImportSession? @relation(fields: [importSessionId], references: [id])

  @@unique([transactionId])
  @@index([frmsisdn])
  @@index([importSessionId])
  @@index([tomsisdn])
  @@index([transactionInitiatedTime])
  @@map("transactions")
}

model ImportSession {
  id           String        @id @default(cuid())
  fileName     String
  fileSize     Int
  totalRows    Int
  validRows    Int
  importedRows Int
  status       ImportStatus  @default(SUCCESS)
  errorMessage String?
  importedAt   DateTime      @default(now())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  uploadedFile UploadedFile?

  @@map("import_sessions")
}

model UploadedFile {
  id          String        @id @default(cuid())
  fileName    String
  originalName String
  fileSize    Int
  mimeType    String
  filePath    String        // Chemin vers le fichier stock√©
  status      FileStatus    @default(UPLOADED)
  uploadedAt  DateTime      @default(now())
  processedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relation avec la session d'import
  importSessionId String? @unique
  importSession   ImportSession? @relation(fields: [importSessionId], references: [id])

  @@map("uploaded_files")
}

enum ImportStatus {
  SUCCESS
  FAILED
  PARTIAL
  CANCELLED
}

enum FileStatus {
  UPLOADED
  PROCESSING
  PROCESSED
  FAILED
  DELETED
}

enum UserRole {
  ADMIN
  USER
}
